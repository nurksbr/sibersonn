// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Kullanıcı modeli
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  password      String
  image         String?
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // 2FA alanları
  twoFactorEnabled Boolean  @default(false)
  twoFactorSecret  String?
  backupCodes      String[]

  // İlişkiler
  profile        Profile?
  posts          Post[]
  comments       Comment[]
  bookmarks      Bookmark[]
  courseProgress CourseProgress[]
  badges         UserBadge[]
  achievement    UserAchievement?
  challenges     UserChallenge[]
}

// Kullanıcı profili
model Profile {
  id           String   @id @default(cuid())
  bio          String?
  organization String?
  title        String?
  location     String?
  interests    String[]
  socialLinks  Json?

  // Kişiselleştirme özellikleri
  theme              Theme                    @default(LIGHT)
  notificationPrefs  NotificationPreferences?
  securityLevel      SecurityLevel            @default(BEGINNER)
  avatarUrl          String?
  coverImageUrl      String?
  preferredLanguage  String?                  @default("tr")
  contentPreferences String[] // İlgilenilen içerik kategorileri
  lastSeen           DateTime?

  // İlişkiler
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Blog yazıları
model Post {
  id          String    @id @default(cuid())
  title       String
  slug        String    @unique
  content     String
  excerpt     String?
  publishedAt DateTime?
  coverImage  String?
  published   Boolean   @default(false)
  featured    Boolean   @default(false)
  views       Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // İlişkiler
  authorId   String
  author     User             @relation(fields: [authorId], references: [id])
  categories CategoryOnPost[]
  tags       TagOnPost[]
  comments   Comment[]
  bookmarks  Bookmark[]
}

// Kategoriler
model Category {
  id          String  @id @default(cuid())
  name        String  @unique
  slug        String  @unique
  description String?

  // İlişkiler
  posts CategoryOnPost[]
}

// Etiketler
model Tag {
  id   String @id @default(cuid())
  name String @unique
  slug String @unique

  // İlişkiler
  posts TagOnPost[]
}

// Çoka-çok ilişki tabloları
model CategoryOnPost {
  postId     String
  categoryId String

  post     Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@id([postId, categoryId])
}

model TagOnPost {
  postId String
  tagId  String

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  tag  Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([postId, tagId])
}

// Yorumlar
model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // İlişkiler
  postId   String
  post     Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  authorId String
  author   User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  parentId String?
  parent   Comment?  @relation("CommentToComment", fields: [parentId], references: [id], onDelete: SetNull)
  replies  Comment[] @relation("CommentToComment")
}

// Yer imleri
model Bookmark {
  createdAt DateTime @default(now())

  // İlişkiler
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@id([userId, postId])
}

// Kurslar
model Course {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique
  description String
  coverImage  String?
  level       Level    @default(BEGINNER)
  price       Float?
  isFree      Boolean  @default(false)
  isPublished Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // İlişkiler
  modules  Module[]
  progress CourseProgress[]
}

// Kurs modülleri
model Module {
  id          String  @id @default(cuid())
  title       String
  description String?
  order       Int

  // İlişkiler
  courseId String
  course   Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons  Lesson[]
}

// Dersler
model Lesson {
  id       String  @id @default(cuid())
  title    String
  content  String
  videoUrl String?
  order    Int
  duration Int? // dakika cinsinden

  // İlişkiler
  moduleId String
  module   Module @relation(fields: [moduleId], references: [id], onDelete: Cascade)
}

// Kurs ilerleme durumu
model CourseProgress {
  id                 String    @id @default(cuid())
  completedLessons   Json // tamamlanan derslerin id'lerini içeren dizi
  startedAt          DateTime  @default(now())
  completedAt        DateTime?
  lastAccessedAt     DateTime  @default(now())
  progressPercentage Float     @default(0) // 0-100 arası tamamlanma yüzdesi

  // İlişkiler
  userId   String
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
}

// Rozetler
model Badge {
  id          String        @id @default(cuid())
  name        String
  description String
  imageUrl    String
  category    BadgeCategory
  difficulty  Level
  points      Int           @default(10)
  isHidden    Boolean       @default(false) // Gizli rozetler için
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // İlişkiler
  userBadges UserBadge[]
}

// Kullanıcı rozetleri
model UserBadge {
  id        String   @id @default(cuid())
  earnedAt  DateTime @default(now())
  showcased Boolean  @default(false) // Profilde öne çıkarılan rozetler

  // İlişkiler
  userId  String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  badgeId String
  badge   Badge  @relation(fields: [badgeId], references: [id], onDelete: Cascade)

  @@unique([userId, badgeId])
}

// Kullanıcı başarıları ve istatistikleri
model UserAchievement {
  id               String   @id @default(cuid())
  totalPoints      Int      @default(0)
  level            Int      @default(1)
  streak           Int      @default(0) // Ardışık günlük giriş sayısı
  longestStreak    Int      @default(0)
  lastLoginDate    DateTime @default(now())
  completedCourses Int      @default(0)
  completedLessons Int      @default(0)
  phishingScore    Float? // Phishing simülasyonlarındaki başarı oranı
  securityScore    Float? // Genel güvenlik bilgi seviyesi skoru
  weeklyGoal       Int      @default(30) // Dakika cinsinden haftalık hedef
  weeklyProgress   Int      @default(0) // Dakika cinsinden haftalık ilerleme

  // İlişkiler
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Meydan okumalar
model Challenge {
  id              String   @id @default(cuid())
  title           String
  description     String
  startDate       DateTime
  endDate         DateTime
  isActive        Boolean  @default(true)
  points          Int
  maxParticipants Int?

  // İlişkiler
  participants UserChallenge[]
}

// Kullanıcı meydan okumaları
model UserChallenge {
  id          String    @id @default(cuid())
  joinedAt    DateTime  @default(now())
  completedAt DateTime?
  progress    Float     @default(0) // 0-100 arası tamamlanma yüzdesi

  // İlişkiler
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  challengeId String
  challenge   Challenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)

  @@unique([userId, challengeId])
}

// Siber tehdit istihbaratı
model ThreatIntel {
  id          String        @id @default(cuid())
  title       String
  description String
  severity    SeverityLevel
  type        ThreatType
  indicators  Json // IoC'ler (Indicators of Compromise)
  publishedAt DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  source      String?
}

// Enum tanımlamaları
enum Role {
  USER
  EDITOR
  ADMIN
}

enum Level {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  EXPERT
}

enum SeverityLevel {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum ThreatType {
  MALWARE
  PHISHING
  VULNERABILITY
  RANSOMWARE
  APT
  OTHER
}

enum Theme {
  LIGHT
  DARK
  SYSTEM
}

enum SecurityLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  EXPERT
}

enum BadgeCategory {
  COURSE_COMPLETION
  STREAK
  SECURITY_AWARENESS
  PHISHING_MASTER
  COMMUNITY
  SPECIAL_EVENT
  CHALLENGE_WINNER
}

// Bildirim tercihleri modeli
model NotificationPreferences {
  id                 String  @id @default(cuid())
  emailNotifications Boolean @default(true)
  smsNotifications   Boolean @default(false)
  securityAlerts     Boolean @default(true)
  newsUpdates        Boolean @default(true)
  courseUpdates      Boolean @default(true)
  marketingEmails    Boolean @default(false)

  // İlişkiler
  profileId String  @unique
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
}
